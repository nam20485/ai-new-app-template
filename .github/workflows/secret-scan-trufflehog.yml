name: Secret Scan (TruffleHog)

on:
    push:
    pull_request:
    workflow_dispatch:

permissions:
    contents: read

jobs:
    trufflehog:
        name: TruffleHog Secret Scan
        runs-on: ubuntu-latest
        steps:
            - name: Determine checkout depth
              shell: bash
              run: |
                  set -euo pipefail
                  if [ "${{ github.event_name }}" = "push" ]; then
                    commits=$(jq 'length' <<< '${{ toJson(github.event.commits) }}')
                    if [ "$commits" -le 0 ]; then
                      depth=2
                    else
                      depth=$((commits + 2))
                    fi
                    echo "branch=${{ github.ref_name }}" >> "$GITHUB_ENV"
                    echo "depth=$depth" >> "$GITHUB_ENV"
                  elif [ "${{ github.event_name }}" = "pull_request" ]; then
                    commits=${{ github.event.pull_request.commits }}
                    depth=$((commits + 2))
                    echo "branch=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_ENV"
                    echo "depth=$depth" >> "$GITHUB_ENV"
                  else
                    echo "branch=${{ github.ref_name }}" >> "$GITHUB_ENV"
                    echo "depth=0" >> "$GITHUB_ENV"
                  fi
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ env.branch }}
                  fetch-depth: ${{ env.depth }}

            - name: Prepare TruffleHog allowlist flags
              id: allowlist
              shell: bash
              run: |
                  set -euo pipefail
                  python scripts/security/allowlist_flags.py --output .github/trufflehog-allowlist-flags.txt
                  cat .github/trufflehog-allowlist-flags.txt >> "$GITHUB_OUTPUT"

            - name: Run TruffleHog OSS (GitHub Action)
              id: oss_action
              continue-on-error: true
              uses: trufflesecurity/trufflehog@main
              with:
                  extra_args: >-
                      --results=verified,unknown
                      --fail
                      ${{ steps.allowlist.outputs.paths_flag }}
                      ${{ steps.allowlist.outputs.detectors_flag }}

            - name: Install TruffleHog CLI
              if: always()
              shell: bash
              run: |
                  set -euo pipefail
                  python -m pip install --upgrade pip
                  python -m pip install trufflehog
            - name: Run TruffleHog CLI for artifacts
              id: cli_scan
              if: always()
              shell: bash
              run: |
                  set -euo pipefail
                  mkdir -p trufflehog-results
                  status=0
                  scripts/security/run-trufflehog.sh --ci --json-output trufflehog-results/results.ndjson || status=$?
                  echo "$status" > trufflehog-results/exit-code.txt
                  if [ "$status" -eq 0 ]; then
                    echo "cli_status=success" >> "$GITHUB_OUTPUT"
                  else
                    echo "cli_status=failure" >> "$GITHUB_OUTPUT"
                  fi
                  exit 0
            - name: Summarize TruffleHog results
              if: always()
              shell: python
              run: |
                  import json
                  import os
                  from pathlib import Path

                  results_file = Path('trufflehog-results/results.ndjson')
                  summary = Path('trufflehog-results/summary.md')
                  summary.parent.mkdir(parents=True, exist_ok=True)
                  verified = unknown = total = 0
                  rows = []
                  if results_file.exists():
                    with results_file.open('r', encoding='utf-8') as handle:
                      for line in handle:
                        line = line.strip()
                        if not line:
                          continue
                        total += 1
                        payload = json.loads(line)
                        status = payload.get('Verified')
                        if status is True:
                          verified += 1
                        elif status is None:
                          unknown += 1
                        source = payload.get('SourceMetadata', {}).get('Data', {}).get('Git', {})
                        path = source.get('file', 'n/a')
                        detector = payload.get('DetectorName', payload.get('DetectorType', 'n/a'))
                        rows.append(f"| {detector} | {path} |")
                  lines = [
                    '# TruffleHog Scan Summary',
                    '',
                    f'* Total findings: {total}',
                    f'* Verified findings: {verified}',
                    f'* Unknown findings: {unknown}',
                    '',
                  ]
                  if rows:
                    lines.append('| Detector | Path |')
                    lines.append('| --- | --- |')
                    lines.extend(rows[:20])
                    if total > 20:
                      lines.append('')
                      lines.append(f'_Additional {total - 20} findings omitted._')
                  else:
                    lines.append('No findings detected.')
                  summary.write_text('\n'.join(lines) + '\n', encoding='utf-8')
                  with Path(os.environ['GITHUB_STEP_SUMMARY']).open('a', encoding='utf-8') as handle:
                    handle.write('\n'.join(lines) + '\n')
            - name: Upload TruffleHog artifacts
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: trufflehog-results
                  path: trufflehog-results

            - name: Cleanup allowlist temp files
              if: always()
              shell: bash
              run: |
                  set -euo pipefail
                  rm -f .github/trufflehog-allowlist-flags.txt
                  if [ -n "${{ steps.allowlist.outputs.paths_file }}" ]; then
                    rm -f "${{ steps.allowlist.outputs.paths_file }}"
                  fi
                  rm -rf security/.generated || true

            - name: Enforce TruffleHog outcome
              if: always()
              shell: bash
              run: |
                  set -euo pipefail
                  exit_code=0
                  if [ -f trufflehog-results/exit-code.txt ]; then
                    exit_code=$(cat trufflehog-results/exit-code.txt)
                  fi
                  if [ "$exit_code" -ne 0 ]; then
                    echo "TruffleHog CLI reported exit code $exit_code"
                    exit "$exit_code"
                  fi
                  if [ "${{ steps.oss_action.outcome }}" = "failure" ]; then
                    echo "TruffleHog GitHub Action reported a failure."
                    exit 1
                  fi
